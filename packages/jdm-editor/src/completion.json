[
  {
    "label": "$root",
    "type": "variable",
    "detail": "Root variable",
    "boost": -10,
    "info": ""
  },
  {
    "label": "len",
    "type": "function",
    "detail": "`<T>`(var: `string | T[]`) -> `number`",
    "info": "Returns the length of variable"
  },
  {
    "label": "contains",
    "type": "function",
    "detail": "`<T>`(haystack: `string | T[]`, needle: `string | T`) -> `boolean`",
    "info": "Checks if variable contains a needle"
  },
  {
    "label": "flatten",
    "type": "function",
    "detail": "`<T>`(arr: `T[][]`) -> `T[]`",
    "info": "Flattens an array"
  },
  {
    "label": "upper",
    "type": "function",
    "detail": "(str: `string`) -> `string`",
    "info": "Converts all characters in a string to uppercase"
  },
  {
    "label": "lower",
    "type": "function",
    "detail": "(str: `string`) -> `string`",
    "info": "Converts all characters in a string to lowercase"
  },
  {
    "label": "trim",
    "type": "function",
    "detail": "(str: `string`) -> `string`",
    "info": "Returns the string with leading and trailing whitespace removed"
  },
  {
    "label": "startsWith",
    "type": "function",
    "detail": "(str: `string`, prefix: `string`) -> `boolean`",
    "info": "Returns true if the string starts with the specified prefix"
  },
  {
    "label": "endsWith",
    "type": "function",
    "detail": "(str: `string`, suffix: `string`) -> `boolean`",
    "info": "Returns true if the string ends with the specified suffix"
  },
  {
    "label": "matches",
    "type": "function",
    "detail": "(str: `string`, pattern: `string`) -> `boolean`",
    "info": "Returns true if the string matches the specified pattern"
  },
  {
    "label": "extract",
    "type": "function",
    "detail": "(str: `string`, pattern: `string`) -> `string[]`",
    "info": "Extracts matching substrings according to a pattern"
  },
  {
    "label": "fuzzyMatch",
    "type": "function",
    "detail": "(haystack: `string | string[]`, needle: `string`) -> `number | number[]`",
    "info": "Performs a fuzzy search of the needle in the haystack, and returns the match score(s)."
  },
  {
    "label": "split",
    "type": "function",
    "detail": "(str: `string`, delimiter: `string`) -> `string[]`",
    "info": "Splits a string into an array of substrings using the specified delimiter."
  },
  {
    "label": "abs",
    "type": "function",
    "detail": "(num: `number`) -> `number`",
    "info": "Returns the absolute value of a number"
  },
  {
    "label": "sum",
    "type": "function",
    "detail": "(arr: `number[]`) -> `number`",
    "info": "Returns the sum of all elements in the input array."
  },
  {
    "label": "avg",
    "type": "function",
    "detail": "(arr: `number[]`) -> `number`",
    "info": "Calculates the average of all elements in the input array."
  },
  {
    "label": "min",
    "type": "function",
    "detail": "(arr: `number[]`) -> `number`",
    "info": "Returns the smallest of the elements in the input array."
  },
  {
    "label": "max",
    "type": "function",
    "detail": "(arr: `number[]`) -> `number`",
    "info": "Returns the largest of the elements in the input array."
  },
  {
    "label": "rand",
    "type": "function",
    "detail": "(max: `number`) -> `number`",
    "info": "Generates a random number between 0 (inclusive) and max (inclusive)."
  },
  {
    "label": "median",
    "type": "function",
    "detail": "(arr: `number[]`) -> `number`",
    "info": "Calculates the median value of all elements in the input array."
  },
  {
    "label": "mode",
    "type": "function",
    "detail": "(arr: `number[]`) -> `number`",
    "info": "Finds the mode(s) of the input array, which are the most frequent element(s)."
  },
  {
    "label": "floor",
    "type": "function",
    "detail": "(num: `number`) -> `number`",
    "info": "Rounds a number down to the nearest integer."
  },
  {
    "label": "ceil",
    "type": "function",
    "detail": "(num: `number`) -> `number`",
    "info": "Rounds a number up to the nearest integer."
  },
  {
    "label": "round",
    "type": "function",
    "detail": "(num: `number`) -> `number`",
    "info": "Rounds a number to a specified number of decimal places."
  },
  {
    "label": "isNumeric",
    "type": "function",
    "detail": "(value: `any`) -> `boolean`",
    "info": "Checks if the given value is of a numeric type."
  },
  {
    "label": "string",
    "type": "function",
    "detail": "(value: `any`) -> `string`",
    "info": "Converts the given value to a string."
  },
  {
    "label": "number",
    "type": "function",
    "detail": "(value: `any`) -> `number`",
    "info": "Converts the given value to a number."
  },
  {
    "label": "bool",
    "type": "function",
    "detail": "(value: `any`) -> `boolean`",
    "info": "Converts the given value to a boolean."
  },
  {
    "label": "type",
    "type": "function",
    "detail": "`<T>`(value: `T`) -> `string`",
    "info": "Returns a string representing the data type of the value."
  },
  {
    "label": "date",
    "type": "function",
    "detail": "(timestamp: `string | number`) -> `number`",
    "info": "Converts a numeric timestamp to a unix timestamp."
  },
  {
    "label": "time",
    "type": "function",
    "detail": "(timestamp: `string`) -> `number`",
    "info": "Extracts the time from a numeric timestamp and returns it as a seconds from beginning of day."
  },
  {
    "label": "duration",
    "type": "function",
    "detail": "(duration: `string`) -> `number`",
    "info": "e.g. 1h30min"
  },
  {
    "label": "year",
    "type": "function",
    "detail": "(timestamp: `number`) -> `number`",
    "info": "Extracts the year from a given timestamp."
  },
  {
    "label": "dayOfWeek",
    "type": "function",
    "detail": "(timestamp: `number`) -> `number`",
    "info": "Gets the day of the week from a given timestamp, where Sunday might be 0."
  },
  {
    "label": "dayOfMonth",
    "type": "function",
    "detail": "(timestamp: `number`) -> `number`",
    "info": "Extracts the day of the month from a given timestamp."
  },
  {
    "label": "dayOfYear",
    "type": "function",
    "detail": "(timestamp: `number`) -> `number`",
    "info": "Gets the day of the year from a given timestamp."
  },
  {
    "label": "weekOfYear",
    "type": "function",
    "detail": "(timestamp: `number`) -> `number`",
    "info": "Calculates the week of the year from a given timestamp."
  },
  {
    "label": "monthOfYear",
    "type": "function",
    "detail": "(timestamp: `number`) -> `number`",
    "info": "Extracts the month from a given timestamp, typically with January as 1."
  },
  {
    "label": "monthString",
    "type": "function",
    "detail": "(timestamp: `number`) -> `string`",
    "info": "Converts the month from a given timestamp into its string representation (e.g., 'Jan')."
  },
  {
    "label": "dateString",
    "type": "function",
    "detail": "(timestamp: `number`) -> `string`",
    "info": "Converts a timestamp to a human-readable date string."
  },
  {
    "label": "weekdayString",
    "type": "function",
    "detail": "(timestamp: `number`) -> `string`",
    "info": "Converts the day of the week from a given timestamp into its string representation (e.g., 'Mon')."
  },
  {
    "label": "startOf",
    "type": "function",
    "detail": "(timestamp: `number`, unit: `string`) -> `number`",
    "info": "Returns the timestamp representing the start of a specified unit (e.g., day, month, year) based on a given timestamp."
  },
  {
    "label": "endOf",
    "type": "function",
    "detail": "(timestamp: `number`, unit: `string`) -> `number`",
    "info": "Returns the timestamp representing the end of a specified unit (e.g., day, month, year) based on a given timestamp."
  },
  {
    "label": "keys",
    "type": "function",
    "detail": "(obj: `object`) -> `string[]`",
    "info": "Returns an array of a given object's own enumerable property names."
  },
  {
    "label": "values",
    "type": "function",
    "detail": "(obj: `object`) -> `any[]`",
    "info": "Returns an array of a given object's own enumerable property values."
  },
  {
    "label": "all",
    "type": "function",
    "detail": "`<T>`(array: `T[]`, callback: `Callback<T, boolean>`) -> `boolean`",
    "info": "Checks if all elements in the array satisfy the condition defined in the callback."
  },
  {
    "label": "some",
    "type": "function",
    "detail": "`<T>`(array: `T[]`, callback: `Callback<T, boolean>`) -> `boolean`",
    "info": "Checks if at least one element in the array satisfies the condition defined in the callback."
  },
  {
    "label": "none",
    "type": "function",
    "detail": "`<T>`(array: `T[]`, callback: `Callback<T, boolean>`) -> `boolean`",
    "info": "Checks if no elements in the array satisfy the condition defined in the callback."
  },
  {
    "label": "filter",
    "type": "function",
    "detail": "`<T>`(array: `T[]`, callback: `Callback<T, boolean>`) -> `T[]`",
    "info": "Creates a new array with all elements that satisfy the condition defined in the callback."
  },
  {
    "label": "map",
    "type": "function",
    "detail": "`<T, U>`(array: `T[]`, callback: `Callback<T, U>`) -> `U[]`",
    "info": "Creates a new array populated with the results of calling the provided function on every element in the calling array."
  },
  {
    "label": "count",
    "type": "function",
    "detail": "`<T>`(array: `T[]`, callback: `Callback<T, boolean>`) -> `number`",
    "info": "Counts the number of elements in the array that satisfy the condition defined in the callback."
  },
  {
    "label": "one",
    "type": "function",
    "detail": "`<T>`(array: `T[]`, callback: `Callback<T, boolean>`) -> `boolean`",
    "info": "Checks if exactly one element in the array satisfies the condition defined in the callback."
  },
  {
    "label": "flatMap",
    "type": "function",
    "detail": "`<T, U>`(array: `T[]`, callback: `Callback<T, U[]>`) -> `U[]`",
    "info": "First maps each element using a mapping function, then flattens the result into a new array."
  }
]
